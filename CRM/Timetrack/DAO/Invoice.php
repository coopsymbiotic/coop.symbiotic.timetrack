<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.6                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2015                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2015
 *
 * Generated from xml/schema/CRM/Timetrack/Invoice.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_Timetrack_DAO_Invoice extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'korder';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Invoice Id
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Invoice title, short description.
   *
   * @var string
   */
  public $title;
  /**
   * Case (contract) invoiced.
   *
   * @var int unsigned
   */
  public $case_id;
  /**
   * Invoice status.
   *
   * @var int unsigned
   */
  public $state;
  /**
   * Contact ID of the organisation (or person) sending the invoice.
   *
   * @var int unsigned
   */
  public $invoice_from_id;
  /**
   * Work order reference in the accounting system.
   *
   * @var int unsigned
   */
  public $ledger_order_id;
  /**
   * Invoice reference in the accounting system.
   *
   * @var int unsigned
   */
  public $ledger_bill_id;
  /**
   * Number of hours invoiced.
   *
   * @var float
   */
  public $hours_billed;
  /**
   * This seems redundant with the status?
   *
   * @var int unsigned
   */
  public $paid;
  /**
   * Time of creation of the invoice.
   *
   * @var timestamp
   */
  public $created_date;
  /**
   * Time of creation of the invoice.
   *
   * @var timestamp
   */
  public $modified_date;
  /**
   * Date of the deposit, payment received for an invoice.
   *
   * @var timestamp
   */
  public $deposit_date;
  /**
   * Reference for the deposit, usually the cheque or wire transfer reference.
   *
   * @var string
   */
  public $deposit_reference;
  /**
   * Additional information regarding the invoice, to be shown on the invoice.
   *
   * @var text
   */
  public $details_public;
  /**
   * Additional information regarding the invoice, not shown on the invoice.
   *
   * @var text
   */
  public $details_private;
  /**
   * class constructor
   *
   * @return korder
   */
  function __construct()
  {
    $this->__table = 'korder';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'timetrack_invoice_id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Timetrack Invoice ID') ,
          'description' => 'Invoice Id',
          'required' => true,
        ) ,
        'title' => array(
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Title') ,
          'description' => 'Invoice title, short description.',
          'required' => true,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
        ) ,
        'case_id' => array(
          'name' => 'case_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Case (contract) invoiced.',
          'required' => true,
        ) ,
        'state' => array(
          'name' => 'state',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('State') ,
          'description' => 'Invoice status.',
          'required' => false,
        ) ,
        'invoice_from_id' => array(
          'name' => 'invoice_from_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Contact ID of the organisation (or person) sending the invoice.',
          'required' => true,
        ) ,
        'ledger_order_id' => array(
          'name' => 'ledger_order_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Work order reference in the accounting system.',
          'required' => false,
        ) ,
        'ledger_bill_id' => array(
          'name' => 'ledger_bill_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Invoice reference in the accounting system.',
          'required' => true,
        ) ,
        'hours_billed' => array(
          'name' => 'hours_billed',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Hours Billed') ,
          'description' => 'Number of hours invoiced.',
        ) ,
        'paid' => array(
          'name' => 'paid',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Paid') ,
          'description' => 'This seems redundant with the status?',
        ) ,
        'created_date' => array(
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Created Date') ,
          'description' => 'Time of creation of the invoice.',
          'required' => true,
        ) ,
        'modified_date' => array(
          'name' => 'modified_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Modified Date') ,
          'description' => 'Time of creation of the invoice.',
          'required' => false,
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
        ) ,
        'deposit_date' => array(
          'name' => 'deposit_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Deposit Date') ,
          'description' => 'Date of the deposit, payment received for an invoice.',
          'required' => false,
        ) ,
        'deposit_reference' => array(
          'name' => 'deposit_reference',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Deposit Reference') ,
          'description' => 'Reference for the deposit, usually the cheque or wire transfer reference.',
          'required' => false,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
        ) ,
        'details_public' => array(
          'name' => 'details_public',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Details Public') ,
          'description' => 'Additional information regarding the invoice, to be shown on the invoice.',
          'required' => false,
        ) ,
        'details_private' => array(
          'name' => 'details_private',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Details Private') ,
          'description' => 'Additional information regarding the invoice, not shown on the invoice.',
          'required' => false,
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'timetrack_invoice_id',
        'title' => 'title',
        'case_id' => 'case_id',
        'state' => 'state',
        'invoice_from_id' => 'invoice_from_id',
        'ledger_order_id' => 'ledger_order_id',
        'ledger_bill_id' => 'ledger_bill_id',
        'hours_billed' => 'hours_billed',
        'paid' => 'paid',
        'created_date' => 'created_date',
        'modified_date' => 'modified_date',
        'deposit_date' => 'deposit_date',
        'deposit_reference' => 'deposit_reference',
        'details_public' => 'details_public',
        'details_private' => 'details_private',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import[''] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export[''] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
